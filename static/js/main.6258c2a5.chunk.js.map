{"version":3,"sources":["components/weathercard.js","components/Temp.js","App.js","index.js"],"names":["Weathercard","tempInfo","React","useState","weatherState","setWeatherState","temp","humidity","pressure","weathermood","name","speed","country","sunset","useEffect","date","Date","timeStr","getHours","getMinutes","className","toLocaleString","Temp","searchValue","setSearchValue","setTempInfo","getWeatherInfo","a","url","fetch","res","json","data","main","weather","wind","sys","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6258c2a5.chunk.js","sourcesContent":["import React, {useEffect}from 'react'\r\n\r\nconst Weathercard = ({tempInfo}) => {\r\n    const [weatherState, setWeatherState] = React.useState(\"\");\r\n    const {\r\n        temp,\r\n        humidity,\r\n        pressure,\r\n        weathermood,\r\n        name,\r\n        speed,\r\n        country,\r\n        sunset,\r\n    } = tempInfo;\r\n\r\n    useEffect(() => {\r\n        if(weathermood)\r\n        {\r\n            switch (weathermood) {\r\n                case \"Clouds\": setWeatherState(\"wi-day-cloudy\");\r\n                    break;\r\n                case \"Haze\": setWeatherState(\"wi-fog\");\r\n                    break;\r\n                case \"Clear\": setWeatherState(\"wi-day-sunny\");\r\n                    break;\r\n                case \"Mist\": setWeatherState(\"wi-dust\");\r\n                    break;\r\n                    case \"Rain\": setWeatherState(\"wi-rain\");\r\n                    break;\r\n            \r\n                default:\r\n                    setWeatherState(\"wi-day-cloud\");\r\n                    break;\r\n            }\r\n        }\r\n    }, [weathermood]);\r\n\r\n    let sec = sunset;\r\n    let date = new Date(sec * 1000);\r\n    let timeStr = `${date.getHours()}:${date.getMinutes()}`;\r\n    return (\r\n        <>\r\n            <div className=\"widget\">\r\n                <div className=\"weatherIcon\">\r\n                    <i className={`wi ${weatherState}`}></i>\r\n                </div>\r\n                <div className=\"weatherInfo\">\r\n                    <div className=\"temperature\">\r\n                        <span>{temp}&deg;</span>\r\n                    </div>\r\n                    \r\n                    <div className=\"description\">\r\n                        <div className=\"weatherCondition\">{weathermood}</div>\r\n                        <div className=\"place\">{name}, {country}</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"date\">{new Date().toLocaleString()}</div>\r\n\r\n                <div className=\"extra-temp\">\r\n                    <div className=\"temp-info-minmax\">\r\n                        <div className=\"two-sided-section\">\r\n                            <p>\r\n                                <i className={\"wi wi-sunset\"}></i>\r\n                            </p>\r\n                            <p className=\"extra-info-leftside\">\r\n                                {timeStr} PM <br />\r\n                                Sunset\r\n                            </p>\r\n                        </div>\r\n\r\n                        <div className=\"two-sided-section\">\r\n                            <p>\r\n                                <i className={\"wi wi-humidity\"}></i>\r\n                            </p>\r\n                            <p className=\"extra-info-leftside\">\r\n                                {humidity} % <br />\r\n                                Humidity\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"weather-extra-info\">\r\n                        <div className=\"two-sided-section\">\r\n                                <p>\r\n                                    <i className={\"wi wi-thermometer\"}></i>\r\n                                </p>\r\n                                <p className=\"extra-info-leftside\">\r\n                                    {pressure} <br />\r\n                                    Pressure\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"two-sided-section\">\r\n                                <p>\r\n                                    <i className={\"wi wi-windy\"}></i>\r\n                                </p>\r\n                                <p className=\"extra-info-leftside\">\r\n                                    {speed} KMPH <br />\r\n                                    Speed\r\n                                </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Weathercard\r\n","import React, {useState, useEffect} from 'react';\r\nimport Weathercard from './weathercard';\r\nimport \"./style.css\";\r\n\r\nconst Temp = () => {\r\n    const [searchValue, setSearchValue] = useState(\"Varanasi\");\r\n    const [tempInfo, setTempInfo] = useState(\"\");\r\n\r\n    const getWeatherInfo = async () => {\r\n        try {\r\n            let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=ab48a00aceb7650061d2f6e74e79e20a`;\r\n        \r\n            let res = await fetch(url);\r\n            let data = await res.json();\r\n\r\n            const {temp, humidity, pressure} = data.main;\r\n            const {main: weathermood} = data.weather[0];\r\n            const{name} = data;\r\n            const{speed} = data.wind;\r\n            const{country, sunset} = data.sys;\r\n\r\n            const myNewWeatherInfo = {\r\n                temp,\r\n                humidity,\r\n                pressure,\r\n                weathermood,\r\n                name,\r\n                speed,\r\n                country,\r\n                sunset,\r\n            };\r\n\r\n            setTempInfo(myNewWeatherInfo);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getWeatherInfo();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"wrap\">\r\n                <div className=\"search\">\r\n                    <input\r\n                        type=\"search\"\r\n                        placeholder=\"City name\"\r\n                        autoFocus\r\n                        id=\"search\"\r\n                        className=\"searchTerm\"\r\n                        value={searchValue}\r\n                        onChange={(e) => setSearchValue(e.target.value)}\r\n                    />\r\n                    <button className=\"searchButton\" type=\"button\" onClick={getWeatherInfo}>\r\n                        Search\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <Weathercard tempInfo={tempInfo}/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Temp;\r\n","import './App.css';\nimport Temp from './components/Temp';\n\nfunction App() {\n  return (\n    <Temp />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}